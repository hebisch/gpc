/*Pascal specific tree nodes.

  Copyright (C) 2002-2006 Free Software Foundation, Inc.

  Authors: Waldek Hebisch <hebisch@math.uni.wroc.pl>
           Frank Heckenbach <frank@pascal.gnu.de>

  This file is part of GNU Pascal.

  GNU Pascal is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published
  by the Free Software Foundation; either version 3, or (at your
  option) any later version.

  GNU Pascal is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with GNU Pascal; see the file COPYING. If not, write to the
  Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
  02111-1307, USA. */

#ifdef GCC_4_0
DEFTREECODE (OPERATOR_DECL, "operator_decl", tcc_declaration, 0)
/* The field `gpi_int checksum' might be larger than a pointer, so
   reserve two pointer sizes for it. */
DEFTREECODE (INTERFACE_NAME_NODE, "interface_name_node", tcc_exceptional, 3)
DEFTREECODE (IMPORT_NODE, "import_node", tcc_exceptional, 4)
DEFTREECODE (PASCAL_BIT_FIELD_REF, "pascal_bit_field_ref", tcc_reference, 3)
DEFTREECODE (PASCAL_CONSTRUCTOR_CALL, "pascal_constructor_call", tcc_binary, 2)
DEFTREECODE (POWER_EXPR, "power_expr", tcc_binary, 2)
DEFTREECODE (POW_EXPR, "pow_expr", tcc_binary, 2)
DEFTREECODE (SYMDIFF_EXPR, "symdiff_expr", tcc_binary, 2)
DEFTREECODE (RANGE_CHECK_EXPR, "range_check_expr", tcc_expression, 3)
DEFTREECODE (IO_RANGE_CHECK_EXPR, "io_range_check_expr", tcc_expression, 3)
DEFTREECODE (IN_EXPR, "in_expr", tcc_binary, 2)
#ifdef GCC_4_1
DEFTREECODE (PASCAL_SET_CONSTRUCTOR, "pascal_set_constructor", tcc_expression, 1)
#endif
#else
#ifdef EGCS
DEFTREECODE (OPERATOR_DECL, "operator_decl", 'd', 0)
/* The field `gpi_int checksum' might be larger than a pointer, so
   reserve two pointer sizes for it. */
DEFTREECODE (INTERFACE_NAME_NODE, "interface_name_node", 'x', 3)
DEFTREECODE (IMPORT_NODE, "import_node", 'x', 4)
DEFTREECODE (PASCAL_BIT_FIELD_REF, "pascal_bit_field_ref", 'r', 3)
DEFTREECODE (PASCAL_CONSTRUCTOR_CALL, "pascal_constructor_call", '2', 2)
DEFTREECODE (POWER_EXPR, "power_expr", '2', 2)
DEFTREECODE (POW_EXPR, "pow_expr", '2', 2)
DEFTREECODE (SYMDIFF_EXPR, "symdiff_expr", '2', 2)
DEFTREECODE (RANGE_CHECK_EXPR, "range_check_expr", 'e', 3)
DEFTREECODE (IO_RANGE_CHECK_EXPR, "io_range_check_expr", 'e', 3)
#else
DEFTREECODE (OPERATOR_DECL, "operator_decl", "d", 0)
DEFTREECODE (INTERFACE_NAME_NODE, "interface_name_node", "x", 3)
DEFTREECODE (IMPORT_NODE, "import_node", "x", 4)
DEFTREECODE (PASCAL_BIT_FIELD_REF, "pascal_bit_field_ref", "r", 3)
DEFTREECODE (PASCAL_CONSTRUCTOR_CALL, "pascal_constructor_call", "2", 2)
DEFTREECODE (POWER_EXPR, "power_expr", "2", 2)
DEFTREECODE (POW_EXPR, "pow_expr", "2", 2)
DEFTREECODE (SYMDIFF_EXPR, "symdiff_expr", "2", 2)
DEFTREECODE (NAMESPACE_DECL, "namespace_decl", "d", 0)
DEFTREECODE (RANGE_CHECK_EXPR, "range_check_expr", "e", 3)
DEFTREECODE (IO_RANGE_CHECK_EXPR, "io_range_check_expr", "e", 3)
#endif
#endif
